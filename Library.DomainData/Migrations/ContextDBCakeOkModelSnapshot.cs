// <auto-generated />
using System;
using Library.DomainData.DataEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.DomainData.Migrations
{
    [DbContext(typeof(ContextDBCakeOk))]
    partial class ContextDBCakeOkModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Library.DataTable.TableBanner.T_ImageBannerWeb", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<byte[]>("ContentFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TypeImage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("ID");

                    b.ToTable("T_ImageBannerWebs", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableBranch.T_Branch", b =>
                {
                    b.Property<Guid>("IDBrach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IDCity")
                        .HasColumnType("int");

                    b.Property<int>("IDDistrict")
                        .HasColumnType("int");

                    b.Property<int>("IDRegion")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TimeWorking")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IDBrach");

                    b.HasIndex("IDCity");

                    b.HasIndex("IDDistrict");

                    b.HasIndex("IDRegion");

                    b.ToTable("T_Branchs", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableBranch.T_Regions", b =>
                {
                    b.Property<int>("IDRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDRegion"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDRegion");

                    b.ToTable("T_Regiones", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_Cake", b =>
                {
                    b.Property<Guid>("IDCake")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Buy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<int>("IDDiscount")
                        .HasColumnType("int");

                    b.Property<int>("IDElement")
                        .HasColumnType("int");

                    b.Property<Guid>("IDKindCake")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IDNewCake")
                        .HasColumnType("int");

                    b.Property<Guid>("IDPrice")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IDSmell")
                        .HasColumnType("int");

                    b.Property<int>("IDStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("IDTypeCake")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameCake")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoCake")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("View")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("IDCake");

                    b.HasIndex("IDDiscount");

                    b.HasIndex("IDElement");

                    b.HasIndex("IDKindCake");

                    b.HasIndex("IDNewCake");

                    b.HasIndex("IDPrice");

                    b.HasIndex("IDSmell");

                    b.HasIndex("IDStatus");

                    b.HasIndex("IDTypeCake");

                    b.ToTable("T_Cakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakeElement", b =>
                {
                    b.Property<int>("IDElement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDElement"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Egg")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ElementOther")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Flour")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fruit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sugar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDElement");

                    b.ToTable("T_CakeElements", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakeGift", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDCake")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDGift")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDGift");

                    b.ToTable("T_CakeGifts", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakeImage", b =>
                {
                    b.Property<Guid>("IDImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDCake")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("MainImage")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypeImage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IDImage");

                    b.HasIndex("IDCake");

                    b.ToTable("T_CakeImages", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakePrice", b =>
                {
                    b.Property<Guid>("IDPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double?>("PriceDiscount")
                        .HasColumnType("float");

                    b.HasKey("IDPrice");

                    b.ToTable("T_CakePrices", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_DiscountCake", b =>
                {
                    b.Property<int>("IDDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDDiscount"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NameDiscount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PercentReduction")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDDiscount");

                    b.ToTable("T_DiscountCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_Gift", b =>
                {
                    b.Property<Guid>("IDGift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDGift");

                    b.ToTable("T_Gifts", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_KindCake", b =>
                {
                    b.Property<Guid>("IDKindCake")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IDKindCake");

                    b.ToTable("T_KindCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_NewCake", b =>
                {
                    b.Property<int>("IDNewCake")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDNewCake"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDNewCake");

                    b.ToTable("T_NewCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_SmellCake", b =>
                {
                    b.Property<int>("IDSmell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDSmell"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDSmell");

                    b.ToTable("T_SmellCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_StatusCake", b =>
                {
                    b.Property<int>("IDStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDStatus"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IDStatus");

                    b.ToTable("T_StatusCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_TypeCake", b =>
                {
                    b.Property<Guid>("IDTypeCake")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDTypeCake");

                    b.ToTable("T_TypeCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_BillCakeCustom", b =>
                {
                    b.Property<Guid>("IDBill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountCake")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDCustom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IDPay")
                        .HasColumnType("int");

                    b.Property<Guid>("IDPriceCustom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDStaff")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IDTypePay")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("IDBill");

                    b.HasIndex("IDCustom");

                    b.HasIndex("IDPay");

                    b.HasIndex("IDPriceCustom");

                    b.HasIndex("IDStaff");

                    b.HasIndex("IDTypePay");

                    b.ToTable("T_BillCakeCustoms", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", b =>
                {
                    b.Property<int>("IDIdea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDIdea"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IDSize")
                        .HasColumnType("int");

                    b.Property<int>("IDStatusIdea")
                        .HasColumnType("int");

                    b.Property<Guid>("IDTypeCake")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IDIdea");

                    b.HasIndex("IDSize");

                    b.HasIndex("IDStatusIdea");

                    b.HasIndex("IDTypeCake");

                    b.HasIndex("IDUser");

                    b.ToTable("T_CakeCustomIdeas", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CustomCake", b =>
                {
                    b.Property<Guid>("IDCustom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IDChef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IDIdea")
                        .HasColumnType("int");

                    b.Property<int>("IDPay")
                        .HasColumnType("int");

                    b.Property<int>("IDStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameCustom")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoCustom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IDCustom");

                    b.HasIndex("IDChef");

                    b.HasIndex("IDIdea");

                    b.HasIndex("IDPay");

                    b.HasIndex("IDStatus");

                    b.HasIndex("IDUser");

                    b.ToTable("T_CustomCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CustomCakePrice", b =>
                {
                    b.Property<Guid>("IDPriceCustom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDCustom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("IDPriceCustom");

                    b.HasIndex("IDCustom");

                    b.ToTable("T_CustomCakePrices", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_ImageCustomIdea", b =>
                {
                    b.Property<Guid>("IDImageCustom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("IDIdea")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypeImage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IDImageCustom");

                    b.HasIndex("IDIdea");

                    b.ToTable("T_ImageCustomIdeas", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_NotificationCustomCake", b =>
                {
                    b.Property<int>("IDNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDNotification"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IDIdea")
                        .HasColumnType("int");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IDNotification");

                    b.HasIndex("IDIdea");

                    b.HasIndex("IDUser");

                    b.ToTable("T_NotificationCustomCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_PayCustomCake", b =>
                {
                    b.Property<int>("IDPay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDPay"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IDPay");

                    b.ToTable("T_PayCustomCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_SizeCake", b =>
                {
                    b.Property<int>("IDSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDSize"), 1L, 1);

                    b.Property<string>("NameSize")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDSize");

                    b.ToTable("T_SizeCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_StatusCustomCake", b =>
                {
                    b.Property<int>("IDStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDStatus"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IDStatus");

                    b.ToTable("T_StatusCustomCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_StatusIdea", b =>
                {
                    b.Property<int>("IDStatusIdea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDStatusIdea"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDStatusIdea");

                    b.ToTable("T_StatusIdeas", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_TypePayCustomCake", b =>
                {
                    b.Property<int>("IDTypePay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTypePay"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDTypePay");

                    b.ToTable("T_TypePayCustomCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_UrlManagerCustomCake", b =>
                {
                    b.Property<Guid>("IDUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDUrl");

                    b.ToTable("T_UrlManagerCustomCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableChef.T_Chef", b =>
                {
                    b.Property<Guid>("IDChef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<Guid>("IDStaff")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoChef")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDChef");

                    b.HasIndex("IDStaff");

                    b.ToTable("T_Chefs", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableChef.T_ChefCake", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDCake")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDChef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDChef");

                    b.ToTable("T_ChefCakes", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableComment.T_Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDCake")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDUser");

                    b.ToTable("T_Comments", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableInformationAuthor.T_InformationAuthor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("ContentImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IDPosition")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TypeFile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("IDPosition");

                    b.ToTable("T_InformationAuthors", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableInformationAuthor.T_Position", b =>
                {
                    b.Property<int>("IDPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDPosition"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDPosition");

                    b.ToTable("T_Positions", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_AddressUserDefaul", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("IDCity")
                        .HasColumnType("int");

                    b.Property<int>("IDDistrict")
                        .HasColumnType("int");

                    b.Property<int>("IDTypeAddress")
                        .HasColumnType("int");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("IDCity");

                    b.HasIndex("IDDistrict");

                    b.HasIndex("IDTypeAddress");

                    b.HasIndex("IDUser");

                    b.ToTable("T_AddressUserDefauls", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_CancelOrder", b =>
                {
                    b.Property<Guid>("IDCancel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDOrder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IDCancel");

                    b.HasIndex("IDOrder");

                    b.ToTable("T_CancelOrders", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_CartUser", b =>
                {
                    b.Property<Guid>("IDCart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDCake")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IDCart");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDUser");

                    b.ToTable("T_CartUsers", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_InfomationOrder", b =>
                {
                    b.Property<Guid>("IDInfomationOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailCustomer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpecteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IDBrach")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IDCity")
                        .HasColumnType("int");

                    b.Property<int>("IDDistrict")
                        .HasColumnType("int");

                    b.Property<string>("NameCustomer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NoteCustomer")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PhoneCustomer")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("IDInfomationOrder");

                    b.HasIndex("IDBrach");

                    b.HasIndex("IDCity");

                    b.HasIndex("IDDistrict");

                    b.ToTable("T_InfomationOrders", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_Order", b =>
                {
                    b.Property<Guid>("IDOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CancelOrder")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDInfomationOrder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDPay")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IDStatusOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PercentReduction")
                        .HasColumnType("int");

                    b.Property<bool>("UseVocher")
                        .HasColumnType("bit");

                    b.HasKey("IDOrder");

                    b.HasIndex("IDInfomationOrder");

                    b.HasIndex("IDPay");

                    b.HasIndex("IDStatusOrder");

                    b.HasIndex("IDUser");

                    b.ToTable("T_Orders", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_OrderDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDCake")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDGift")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDOrder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IDSmell")
                        .HasColumnType("int");

                    b.Property<Guid>("IDStaff")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quatity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDGift");

                    b.HasIndex("IDOrder");

                    b.HasIndex("IDSmell");

                    b.HasIndex("IDStaff");

                    b.ToTable("T_OrderDetails", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_StatusOrder", b =>
                {
                    b.Property<int>("IDStatusOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDStatusOrder"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PesentProgess")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDStatusOrder");

                    b.ToTable("T_StatusOrders", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_TypeAddress", b =>
                {
                    b.Property<int>("IDTypeAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTypeAddress"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDTypeAddress");

                    b.ToTable("T_TypeAddreses", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_TypePay", b =>
                {
                    b.Property<Guid>("IDPay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NamePay")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDPay");

                    b.ToTable("T_TypePays", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableRating.T_Rating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDCake")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDUser");

                    b.ToTable("T_Ratings", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableRating.T_RatingWebsite", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IDUser");

                    b.ToTable("T_RatingWebsites", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableRole.T_Role", b =>
                {
                    b.Property<Guid>("IDRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Discripttion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IDRole");

                    b.ToTable("T_Roles", (string)null);

                    b.HasData(
                        new
                        {
                            IDRole = new Guid("d6e0ac8a-7eed-4865-a6f0-3f5a8ba60bdc"),
                            CreateDate = new DateTime(2023, 4, 12, 1, 28, 50, 940, DateTimeKind.Utc).AddTicks(1641),
                            Discripttion = "Admin Quản Lý Toàn Bộ Hệ Thống",
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            NameRole = "Admin",
                            Symbol = "AD"
                        });
                });

            modelBuilder.Entity("Library.DataTable.TableRole.T_UserRole", b =>
                {
                    b.Property<int>("IDUserRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDUserRole"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDRole")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDStaff")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDUserRole");

                    b.HasIndex("IDRole");

                    b.HasIndex("IDStaff");

                    b.ToTable("T_UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            IDUserRole = 1,
                            CreateDate = new DateTime(2023, 4, 12, 1, 28, 51, 64, DateTimeKind.Utc).AddTicks(8865),
                            IDRole = new Guid("d6e0ac8a-7eed-4865-a6f0-3f5a8ba60bdc"),
                            IDStaff = new Guid("d8b14017-6271-4f1c-8c50-c06b06fcd28b"),
                            Status = true
                        });
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_BannerRotationLuck", b =>
                {
                    b.Property<int>("IDBackRound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDBackRound"), 1L, 1);

                    b.Property<byte[]>("ContentFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TypeFile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IDBackRound");

                    b.ToTable("T_BannerRotationLucks", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_GiftLuck", b =>
                {
                    b.Property<Guid>("IDLuck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ContentImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameGift")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TypeFile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IDLuck");

                    b.ToTable("T_GiftLucks", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_HistoryGetGiftUserRotaionLuck", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDLuck")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("IDLuck");

                    b.HasIndex("IDUser");

                    b.ToTable("T_HistoryGetGiftUserRotaionLucks", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_HistoryTurnRotaionLuck", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("t_CustomerIDUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("t_CustomerIDUser");

                    b.ToTable("T_HistoryTurnRotaionLucks", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_RotationLuck", b =>
                {
                    b.Property<Guid>("IDRotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDLuck")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PercentPage")
                        .HasColumnType("float");

                    b.HasKey("IDRotation");

                    b.HasIndex("IDLuck");

                    b.ToTable("T_RotationLucks", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_TakeTurnsRotaionLuck", b =>
                {
                    b.Property<int>("IDTurns")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTurns"), 1L, 1);

                    b.Property<int>("AmountTakeTurn")
                        .HasColumnType("int");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IDTurns");

                    b.HasIndex("IDUser");

                    b.ToTable("T_TakeTurnsRotaionLucks", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableStaff.T_Staff", b =>
                {
                    b.Property<Guid>("IDStaff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("Nvarchar(200)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContentFile")
                        .HasColumnType("Nvarchar(MAX)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("Nvarchar(100)");

                    b.Property<Guid>("IDAccount")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IDCity")
                        .HasColumnType("int");

                    b.Property<string>("IDCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IDCustomerOrStaff")
                        .HasColumnType("int");

                    b.Property<int>("IDDistrict")
                        .HasColumnType("int");

                    b.Property<int>("IDGender")
                        .HasColumnType("int");

                    b.Property<int>("IDMarriage")
                        .HasColumnType("int");

                    b.Property<Guid>("IDStaffOrChef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TypeImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDStaff");

                    b.HasIndex("IDAccount");

                    b.HasIndex("IDCity");

                    b.HasIndex("IDCustomerOrStaff");

                    b.HasIndex("IDDistrict");

                    b.HasIndex("IDGender");

                    b.HasIndex("IDMarriage");

                    b.HasIndex("IDStaffOrChef");

                    b.ToTable("T_Staffs", (string)null);

                    b.HasData(
                        new
                        {
                            IDStaff = new Guid("d8b14017-6271-4f1c-8c50-c06b06fcd28b"),
                            Address = "Khu 13, Xã Long Đức, Huyện Long Thành, Tỉnh Đồng Nai",
                            Birthday = new DateTime(2000, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateDate = new DateTime(2023, 4, 12, 1, 28, 51, 64, DateTimeKind.Utc).AddTicks(8815),
                            FullName = "Trần Duy Tường",
                            IDAccount = new Guid("723d5b79-51fa-45d1-8ed3-14c53580110f"),
                            IDCity = 1,
                            IDCode = "ID1/1/0001 12:00:00 AM110335520146",
                            IDCustomerOrStaff = 2,
                            IDDistrict = 1,
                            IDGender = 1,
                            IDMarriage = 1,
                            IDStaffOrChef = new Guid("b9c709e5-0ae2-4ca2-b5b1-1c6509fba56c"),
                            Phone = "0335520146"
                        });
                });

            modelBuilder.Entity("Library.DataTable.TableStaff.T_StaffOrChef", b =>
                {
                    b.Property<Guid>("IDStaffOrChef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDStaffOrChef");

                    b.ToTable("T_StaffOrChefs", (string)null);

                    b.HasData(
                        new
                        {
                            IDStaffOrChef = new Guid("b9c709e5-0ae2-4ca2-b5b1-1c6509fba56c"),
                            CreateDate = new DateTime(2023, 4, 12, 1, 28, 50, 940, DateTimeKind.Utc).AddTicks(1621),
                            Name = "Nhân Viên Hỗ Trợ",
                            Status = true
                        },
                        new
                        {
                            IDStaffOrChef = new Guid("fb0ad9bd-9be3-4557-ac8b-1001d48ec3b5"),
                            CreateDate = new DateTime(2023, 4, 12, 1, 28, 50, 940, DateTimeKind.Utc).AddTicks(1622),
                            Name = "Đầu Bếp Làm Bánh",
                            Status = true
                        });
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_ChangePassword", b =>
                {
                    b.Property<Guid>("IDChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRequest")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailRequest")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDChange");

                    b.ToTable("T_ChangePasswords", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_CheckLoginLogout", b =>
                {
                    b.Property<DateTime>("WorkingStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HourWoking")
                        .HasColumnType("int");

                    b.Property<Guid>("IDStaff")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WorkingEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkingStart");

                    b.ToTable("T_CheckLoginLogouts", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_City", b =>
                {
                    b.Property<int>("IDCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDCity"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDCity");

                    b.ToTable("T_Citys", (string)null);

                    b.HasData(
                        new
                        {
                            IDCity = 1,
                            Name = "Tp.Hcm",
                            Status = true
                        },
                        new
                        {
                            IDCity = 2,
                            Name = "Tp.Hà Nội",
                            Status = true
                        },
                        new
                        {
                            IDCity = 3,
                            Name = "Tp.Đà Lạt",
                            Status = true
                        },
                        new
                        {
                            IDCity = 4,
                            Name = "Tp.Cần Thơ",
                            Status = true
                        },
                        new
                        {
                            IDCity = 5,
                            Name = "Tp.Long Xuyên",
                            Status = true
                        },
                        new
                        {
                            IDCity = 6,
                            Name = "Tp.Long Khánh",
                            Status = true
                        },
                        new
                        {
                            IDCity = 7,
                            Name = "Tp.Huế",
                            Status = true
                        });
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Country", b =>
                {
                    b.Property<int>("IDCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDCountry"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDCountry");

                    b.ToTable("T_Countrys", (string)null);

                    b.HasData(
                        new
                        {
                            IDCountry = 1,
                            CreateDate = new DateTime(2023, 4, 12, 1, 28, 50, 940, DateTimeKind.Utc).AddTicks(1541),
                            Name = "Việt Nam",
                            Status = true
                        },
                        new
                        {
                            IDCountry = 2,
                            CreateDate = new DateTime(2023, 4, 12, 1, 28, 50, 940, DateTimeKind.Utc).AddTicks(1545),
                            Name = "Lào",
                            Status = true
                        },
                        new
                        {
                            IDCountry = 3,
                            CreateDate = new DateTime(2023, 4, 12, 1, 28, 50, 940, DateTimeKind.Utc).AddTicks(1546),
                            Name = "Campuchia",
                            Status = true
                        },
                        new
                        {
                            IDCountry = 4,
                            CreateDate = new DateTime(2023, 4, 12, 1, 28, 50, 940, DateTimeKind.Utc).AddTicks(1546),
                            Name = "Thái Lan",
                            Status = true
                        });
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Customer", b =>
                {
                    b.Property<Guid>("IDUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("ContentFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("IDAccount")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IDCity")
                        .HasColumnType("int");

                    b.Property<int>("IDCountry")
                        .HasColumnType("int");

                    b.Property<int>("IDCustomerOrStaff")
                        .HasColumnType("int");

                    b.Property<int>("IDDistrict")
                        .HasColumnType("int");

                    b.Property<int>("IDGender")
                        .HasColumnType("int");

                    b.Property<string>("MimeFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TypeFile")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IDUser");

                    b.HasIndex("IDAccount");

                    b.HasIndex("IDCity");

                    b.HasIndex("IDCountry");

                    b.HasIndex("IDCustomerOrStaff");

                    b.HasIndex("IDDistrict");

                    b.HasIndex("IDGender");

                    b.ToTable("T_Customers", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_CustomerOrStaff", b =>
                {
                    b.Property<int>("IDCustomerOrStaff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDCustomerOrStaff"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IDCustomerOrStaff");

                    b.ToTable("T_CustomerOrStaffs", (string)null);

                    b.HasData(
                        new
                        {
                            IDCustomerOrStaff = 1,
                            CreateDate = new DateTime(2023, 4, 12, 1, 28, 50, 940, DateTimeKind.Utc).AddTicks(1593),
                            Name = "Khách Hàng"
                        },
                        new
                        {
                            IDCustomerOrStaff = 2,
                            CreateDate = new DateTime(2023, 4, 12, 1, 28, 50, 940, DateTimeKind.Utc).AddTicks(1597),
                            Name = "Nhân Viên"
                        });
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_District", b =>
                {
                    b.Property<int>("IDDistrict")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDDistrict"), 1L, 1);

                    b.Property<int>("IDCity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDDistrict");

                    b.HasIndex("IDCity");

                    b.ToTable("T_Districts", (string)null);

                    b.HasData(
                        new
                        {
                            IDDistrict = 1,
                            IDCity = 1,
                            Name = "Quận 1",
                            Status = true
                        },
                        new
                        {
                            IDDistrict = 2,
                            IDCity = 1,
                            Name = "Quận 2",
                            Status = true
                        },
                        new
                        {
                            IDDistrict = 3,
                            IDCity = 1,
                            Name = "Quận 3",
                            Status = true
                        },
                        new
                        {
                            IDDistrict = 4,
                            IDCity = 2,
                            Name = "Huyện Ba Vì",
                            Status = true
                        },
                        new
                        {
                            IDDistrict = 5,
                            IDCity = 6,
                            Name = "Huyện Xuân Lộc",
                            Status = true
                        });
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Gender", b =>
                {
                    b.Property<int>("IDGender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDGender"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDGender");

                    b.ToTable("T_Genders", (string)null);

                    b.HasData(
                        new
                        {
                            IDGender = 1,
                            Name = "Nam",
                            Status = true
                        },
                        new
                        {
                            IDGender = 2,
                            Name = "Nữ",
                            Status = true
                        });
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_HistorySeachUser", b =>
                {
                    b.Property<Guid>("IdSeach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SeachName")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("IdSeach");

                    b.HasIndex("IDUser");

                    b.ToTable("T_HistorySeachUsers", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Marriage", b =>
                {
                    b.Property<int>("IDMarriage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDMarriage"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IDMarriage");

                    b.ToTable("T_Marriages", (string)null);

                    b.HasData(
                        new
                        {
                            IDMarriage = 1,
                            Name = "Độc Thân",
                            Status = true
                        },
                        new
                        {
                            IDMarriage = 2,
                            Name = "Đã Kết Hôn",
                            Status = true
                        },
                        new
                        {
                            IDMarriage = 3,
                            Name = "Đã Ly Hôn",
                            Status = true
                        });
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_TokenLogin", b =>
                {
                    b.Property<int>("IDToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDToken"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDToken");

                    b.ToTable("T_TokenLogins", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_User", b =>
                {
                    b.Property<Guid>("IDAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IDCustomerOrStaff")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IDAccount");

                    b.HasIndex("IDCustomerOrStaff");

                    b.ToTable("T_Users", (string)null);

                    b.HasData(
                        new
                        {
                            IDAccount = new Guid("723d5b79-51fa-45d1-8ed3-14c53580110f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a09da9f-12a1-4563-b64a-626ef41034e6",
                            CreateDate = new DateTime(2023, 4, 12, 1, 28, 51, 64, DateTimeKind.Utc).AddTicks(8069),
                            Email = "duytuong0503@gmail.com",
                            EmailConfirmed = true,
                            IDCustomerOrStaff = 2,
                            Id = new Guid("723d5b79-51fa-45d1-8ed3-14c53580110f"),
                            LockoutEnabled = false,
                            PassWord = "AQAAAAIAAYagAAAAEDHyh/iJKUjLQHehGxvYYOBn0oXsQHmadTXDjctoiZR3CUM9sAHlMfUuq0CMh1UKsg==",
                            PasswordHash = "AQAAAAIAAYagAAAAEJE8FoXLwY1SkCSrRS2wfiR8gkv3FCL0BanP5KsYHwGVTymQBKMb3stIwYHLJYiOhA==",
                            PhoneNumber = "0335520146",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "duytuong0503@gmail.com"
                        });
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_ViewerCakeUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("IDCake")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDUser");

                    b.ToTable("T_ViewerCakeUsers", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableVocher.T_HistoryUserGetVocher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDVocher")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("StatusUseVocher")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("IDUser");

                    b.HasIndex("IDVocher");

                    b.ToTable("T_HistoryUserGetVochers", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableVocher.T_HistoryUseVocher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDVocher")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("IDUser");

                    b.HasIndex("IDVocher");

                    b.ToTable("T_HistoryUseVochers", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableVocher.T_Vocher", b =>
                {
                    b.Property<Guid>("IDVocher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameVocher")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PercenReduction")
                        .HasColumnType("int");

                    b.HasKey("IDVocher");

                    b.ToTable("T_Vochers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("Library.DataTable.TableBranch.T_Branch", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_City", "t_City")
                        .WithMany("t_Branches")
                        .HasForeignKey("IDCity")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_District", "t_District")
                        .WithMany("t_Branches")
                        .HasForeignKey("IDDistrict")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableBranch.T_Regions", "t_Regions")
                        .WithMany("t_Branch")
                        .HasForeignKey("IDRegion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_City");

                    b.Navigation("t_District");

                    b.Navigation("t_Regions");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_Cake", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_DiscountCake", "t_DiscountCake")
                        .WithMany("t_Cakes")
                        .HasForeignKey("IDDiscount")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_CakeElement", "t_CakeElement")
                        .WithMany("t_Cakes")
                        .HasForeignKey("IDElement")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_KindCake", "t_KindCake")
                        .WithMany("t_Cakes")
                        .HasForeignKey("IDKindCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_NewCake", "t_NewCake")
                        .WithMany("t_Cakes")
                        .HasForeignKey("IDNewCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_CakePrice", "t_CakePrice")
                        .WithMany("t_Cakes")
                        .HasForeignKey("IDPrice")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_SmellCake", "t_SmellCake")
                        .WithMany("t_Cakes")
                        .HasForeignKey("IDSmell")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_StatusCake", "t_StatusCake")
                        .WithMany("t_Cakes")
                        .HasForeignKey("IDStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_TypeCake", "t_TypeCake")
                        .WithMany("t_Cakes")
                        .HasForeignKey("IDTypeCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_CakeElement");

                    b.Navigation("t_CakePrice");

                    b.Navigation("t_DiscountCake");

                    b.Navigation("t_KindCake");

                    b.Navigation("t_NewCake");

                    b.Navigation("t_SmellCake");

                    b.Navigation("t_StatusCake");

                    b.Navigation("t_TypeCake");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakeGift", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_CakeGifts")
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_Gift", "t_Gift")
                        .WithMany("t_CakeGifts")
                        .HasForeignKey("IDGift")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Cake");

                    b.Navigation("t_Gift");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakeImage", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_CakeImages")
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Cake");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_BillCakeCustom", b =>
                {
                    b.HasOne("Library.DataTable.TableCakeCustom.T_CustomCake", "t_CustomCake")
                        .WithMany("t_BillCakeCustom")
                        .HasForeignKey("IDCustom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_PayCustomCake", "t_PayCustomCake")
                        .WithMany("t_BillCakeCustom")
                        .HasForeignKey("IDPay")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_CustomCakePrice", "t_CustomCakePrice")
                        .WithMany("t_BillCakeCustoms")
                        .HasForeignKey("IDPriceCustom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableStaff.T_Staff", "t_Staff")
                        .WithMany("t_BillCakeCustoms")
                        .HasForeignKey("IDStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_TypePayCustomCake", "t_TypePayCustomCake")
                        .WithMany("t_BillCakeCustoms")
                        .HasForeignKey("IDTypePay")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_CustomCake");

                    b.Navigation("t_CustomCakePrice");

                    b.Navigation("t_PayCustomCake");

                    b.Navigation("t_Staff");

                    b.Navigation("t_TypePayCustomCake");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", b =>
                {
                    b.HasOne("Library.DataTable.TableCakeCustom.T_SizeCake", "t_SizeCake")
                        .WithMany("t_CakeCustomIdea")
                        .HasForeignKey("IDSize")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_StatusIdea", "t_StatusIdea")
                        .WithMany("t_CakeCustomIdea")
                        .HasForeignKey("IDStatusIdea")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_TypeCake", "t_TypeCake")
                        .WithMany("t_CakeCustomIdeas")
                        .HasForeignKey("IDTypeCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_CakeCustomIdeas")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Customer");

                    b.Navigation("t_SizeCake");

                    b.Navigation("t_StatusIdea");

                    b.Navigation("t_TypeCake");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CustomCake", b =>
                {
                    b.HasOne("Library.DataTable.TableChef.T_Chef", "t_Chef")
                        .WithMany("t_CustomCakes")
                        .HasForeignKey("IDChef")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", "t_CakeCustomIdea")
                        .WithMany("t_CustomCakes")
                        .HasForeignKey("IDIdea")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_PayCustomCake", "t_PayCustomCake")
                        .WithMany("t_CustomCakes")
                        .HasForeignKey("IDPay")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_StatusCustomCake", "t_StatusCustomCake")
                        .WithMany("t_CustomCakes")
                        .HasForeignKey("IDStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_CustomCakes")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_CakeCustomIdea");

                    b.Navigation("t_Chef");

                    b.Navigation("t_Customer");

                    b.Navigation("t_PayCustomCake");

                    b.Navigation("t_StatusCustomCake");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CustomCakePrice", b =>
                {
                    b.HasOne("Library.DataTable.TableCakeCustom.T_CustomCake", "t_CustomCake")
                        .WithMany("t_CustomCakePrices")
                        .HasForeignKey("IDCustom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_CustomCake");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_ImageCustomIdea", b =>
                {
                    b.HasOne("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", "t_CakeCustomIdea")
                        .WithMany("t_ImageCustomIdeas")
                        .HasForeignKey("IDIdea")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_CakeCustomIdea");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_NotificationCustomCake", b =>
                {
                    b.HasOne("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", "t_CakeCustomIdea")
                        .WithMany("t_NotificationCustomCakes")
                        .HasForeignKey("IDIdea")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_NotificationCustomCakes")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_CakeCustomIdea");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableChef.T_Chef", b =>
                {
                    b.HasOne("Library.DataTable.TableStaff.T_Staff", "t_Staff")
                        .WithMany("t_Chefs")
                        .HasForeignKey("IDStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Staff");
                });

            modelBuilder.Entity("Library.DataTable.TableChef.T_ChefCake", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_ChefCakes")
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableChef.T_Chef", "t_Chef")
                        .WithMany("t_ChefCakes")
                        .HasForeignKey("IDChef")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Cake");

                    b.Navigation("t_Chef");
                });

            modelBuilder.Entity("Library.DataTable.TableComment.T_Comment", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_Comments")
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_Comments")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Cake");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableInformationAuthor.T_InformationAuthor", b =>
                {
                    b.HasOne("Library.DataTable.TableInformationAuthor.T_Position", "t_Position")
                        .WithMany("t_InformationAuthors")
                        .HasForeignKey("IDPosition")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Position");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_AddressUserDefaul", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_City", "t_City")
                        .WithMany("t_AddressUserDefauls")
                        .HasForeignKey("IDCity")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_District", "t_District")
                        .WithMany("t_AddressUserDefauls")
                        .HasForeignKey("IDDistrict")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableOrder.T_TypeAddress", "t_TypeAddress")
                        .WithMany("t_AddressUserDefaul")
                        .HasForeignKey("IDTypeAddress")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_AddressUserDefauls")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_City");

                    b.Navigation("t_Customer");

                    b.Navigation("t_District");

                    b.Navigation("t_TypeAddress");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_CancelOrder", b =>
                {
                    b.HasOne("Library.DataTable.TableOrder.T_Order", "t_Order")
                        .WithMany("t_CancelOrders")
                        .HasForeignKey("IDOrder")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Order");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_CartUser", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_CartUsers")
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_CartUsers")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Cake");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_InfomationOrder", b =>
                {
                    b.HasOne("Library.DataTable.TableBranch.T_Branch", "t_Branch")
                        .WithMany("t_InfomationOrders")
                        .HasForeignKey("IDBrach")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_City", "t_City")
                        .WithMany("t_InfomationOrders")
                        .HasForeignKey("IDCity")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_District", "t_District")
                        .WithMany("t_InfomationOrders")
                        .HasForeignKey("IDDistrict")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Branch");

                    b.Navigation("t_City");

                    b.Navigation("t_District");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_Order", b =>
                {
                    b.HasOne("Library.DataTable.TableOrder.T_InfomationOrder", "t_InfomationOrder")
                        .WithMany("t_Orders")
                        .HasForeignKey("IDInfomationOrder")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableOrder.T_TypePay", "t_TypePay")
                        .WithMany("t_Orders")
                        .HasForeignKey("IDPay")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableOrder.T_StatusOrder", "t_StatusOrder")
                        .WithMany("t_Orders")
                        .HasForeignKey("IDStatusOrder")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_Orders")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Customer");

                    b.Navigation("t_InfomationOrder");

                    b.Navigation("t_StatusOrder");

                    b.Navigation("t_TypePay");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_OrderDetail", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_OrderDetails")
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_Gift", "t_Gift")
                        .WithMany("t_OrderDetails")
                        .HasForeignKey("IDGift")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableOrder.T_Order", "t_Order")
                        .WithMany("t_OrderDetails")
                        .HasForeignKey("IDOrder")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_SmellCake", "t_SmellCake")
                        .WithMany("t_OrderDetails")
                        .HasForeignKey("IDSmell")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableStaff.T_Staff", "t_Staff")
                        .WithMany("t_OrderDetails")
                        .HasForeignKey("IDStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Cake");

                    b.Navigation("t_Gift");

                    b.Navigation("t_Order");

                    b.Navigation("t_SmellCake");

                    b.Navigation("t_Staff");
                });

            modelBuilder.Entity("Library.DataTable.TableRating.T_Rating", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_Ratings")
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_Ratings")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Cake");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableRating.T_RatingWebsite", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_RatingWebsites")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableRole.T_UserRole", b =>
                {
                    b.HasOne("Library.DataTable.TableRole.T_Role", "t_Role")
                        .WithMany("t_UserRoles")
                        .HasForeignKey("IDRole")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableStaff.T_Staff", "t_Staff")
                        .WithMany("t_UserRoles")
                        .HasForeignKey("IDStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Role");

                    b.Navigation("t_Staff");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_HistoryGetGiftUserRotaionLuck", b =>
                {
                    b.HasOne("Library.DataTable.TableRotationLuck.T_GiftLuck", "t_GiftLuck")
                        .WithMany("t_HistoryGetGiftUserRotaionLucks")
                        .HasForeignKey("IDLuck")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_HistoryGetGiftUserRotaionLucks")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Customer");

                    b.Navigation("t_GiftLuck");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_HistoryTurnRotaionLuck", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_HistoryTurnRotaionLucks")
                        .HasForeignKey("t_CustomerIDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_RotationLuck", b =>
                {
                    b.HasOne("Library.DataTable.TableRotationLuck.T_GiftLuck", "t_GiftLuck")
                        .WithMany("t_RotationLucks")
                        .HasForeignKey("IDLuck")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_GiftLuck");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_TakeTurnsRotaionLuck", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_TakeTurnsRotaionLucks")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableStaff.T_Staff", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_User", "t_User")
                        .WithMany("t_Staffs")
                        .HasForeignKey("IDAccount")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_City", "t_City")
                        .WithMany("t_Staffs")
                        .HasForeignKey("IDCity")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_CustomerOrStaff", "t_CustomerOrStaff")
                        .WithMany("t_Staffs")
                        .HasForeignKey("IDCustomerOrStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_District", "t_District")
                        .WithMany("t_Staffs")
                        .HasForeignKey("IDDistrict")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Gender", "t_Gender")
                        .WithMany("t_Staffs")
                        .HasForeignKey("IDGender")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Marriage", "t_Marriage")
                        .WithMany("t_Staffs")
                        .HasForeignKey("IDMarriage")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableStaff.T_StaffOrChef", "t_StaffOrChef")
                        .WithMany("t_Staffs")
                        .HasForeignKey("IDStaffOrChef")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_City");

                    b.Navigation("t_CustomerOrStaff");

                    b.Navigation("t_District");

                    b.Navigation("t_Gender");

                    b.Navigation("t_Marriage");

                    b.Navigation("t_StaffOrChef");

                    b.Navigation("t_User");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Customer", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_User", "t_User")
                        .WithMany("t_Customers")
                        .HasForeignKey("IDAccount")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_City", "t_City")
                        .WithMany("t_Customers")
                        .HasForeignKey("IDCity")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Country", "t_Country")
                        .WithMany("t_Customers")
                        .HasForeignKey("IDCountry")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_CustomerOrStaff", "t_CustomerOrStaff")
                        .WithMany("t_Customers")
                        .HasForeignKey("IDCustomerOrStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_District", "t_District")
                        .WithMany("t_Customers")
                        .HasForeignKey("IDDistrict")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Gender", "t_Gender")
                        .WithMany("t_Customers")
                        .HasForeignKey("IDGender")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_City");

                    b.Navigation("t_Country");

                    b.Navigation("t_CustomerOrStaff");

                    b.Navigation("t_District");

                    b.Navigation("t_Gender");

                    b.Navigation("t_User");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_District", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_City", "t_City")
                        .WithMany("t_Districts")
                        .HasForeignKey("IDCity")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_City");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_HistorySeachUser", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_HistorySeachUsers")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_User", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_CustomerOrStaff", "t_CustomerOrStaff")
                        .WithMany("t_Users")
                        .HasForeignKey("IDCustomerOrStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_CustomerOrStaff");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_ViewerCakeUser", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_ViewerCakeUsers")
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_ViewerCakeUsers")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Cake");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableVocher.T_HistoryUserGetVocher", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_HistoryUserGetVochers")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableVocher.T_Vocher", "t_Vocher")
                        .WithMany("t_HistoryUserGetVocher")
                        .HasForeignKey("IDVocher")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Customer");

                    b.Navigation("t_Vocher");
                });

            modelBuilder.Entity("Library.DataTable.TableVocher.T_HistoryUseVocher", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_HistoryUseVochers")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableVocher.T_Vocher", "t_Vocher")
                        .WithMany("t_HistoryUseVochers")
                        .HasForeignKey("IDVocher")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("t_Customer");

                    b.Navigation("t_Vocher");
                });

            modelBuilder.Entity("Library.DataTable.TableBranch.T_Branch", b =>
                {
                    b.Navigation("t_InfomationOrders");
                });

            modelBuilder.Entity("Library.DataTable.TableBranch.T_Regions", b =>
                {
                    b.Navigation("t_Branch");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_Cake", b =>
                {
                    b.Navigation("t_CakeGifts");

                    b.Navigation("t_CakeImages");

                    b.Navigation("t_CartUsers");

                    b.Navigation("t_ChefCakes");

                    b.Navigation("t_Comments");

                    b.Navigation("t_OrderDetails");

                    b.Navigation("t_Ratings");

                    b.Navigation("t_ViewerCakeUsers");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakeElement", b =>
                {
                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakePrice", b =>
                {
                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_DiscountCake", b =>
                {
                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_Gift", b =>
                {
                    b.Navigation("t_CakeGifts");

                    b.Navigation("t_OrderDetails");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_KindCake", b =>
                {
                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_NewCake", b =>
                {
                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_SmellCake", b =>
                {
                    b.Navigation("t_Cakes");

                    b.Navigation("t_OrderDetails");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_StatusCake", b =>
                {
                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_TypeCake", b =>
                {
                    b.Navigation("t_CakeCustomIdeas");

                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", b =>
                {
                    b.Navigation("t_CustomCakes");

                    b.Navigation("t_ImageCustomIdeas");

                    b.Navigation("t_NotificationCustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CustomCake", b =>
                {
                    b.Navigation("t_BillCakeCustom");

                    b.Navigation("t_CustomCakePrices");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CustomCakePrice", b =>
                {
                    b.Navigation("t_BillCakeCustoms");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_PayCustomCake", b =>
                {
                    b.Navigation("t_BillCakeCustom");

                    b.Navigation("t_CustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_SizeCake", b =>
                {
                    b.Navigation("t_CakeCustomIdea");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_StatusCustomCake", b =>
                {
                    b.Navigation("t_CustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_StatusIdea", b =>
                {
                    b.Navigation("t_CakeCustomIdea");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_TypePayCustomCake", b =>
                {
                    b.Navigation("t_BillCakeCustoms");
                });

            modelBuilder.Entity("Library.DataTable.TableChef.T_Chef", b =>
                {
                    b.Navigation("t_ChefCakes");

                    b.Navigation("t_CustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableInformationAuthor.T_Position", b =>
                {
                    b.Navigation("t_InformationAuthors");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_InfomationOrder", b =>
                {
                    b.Navigation("t_Orders");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_Order", b =>
                {
                    b.Navigation("t_CancelOrders");

                    b.Navigation("t_OrderDetails");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_StatusOrder", b =>
                {
                    b.Navigation("t_Orders");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_TypeAddress", b =>
                {
                    b.Navigation("t_AddressUserDefaul");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_TypePay", b =>
                {
                    b.Navigation("t_Orders");
                });

            modelBuilder.Entity("Library.DataTable.TableRole.T_Role", b =>
                {
                    b.Navigation("t_UserRoles");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_GiftLuck", b =>
                {
                    b.Navigation("t_HistoryGetGiftUserRotaionLucks");

                    b.Navigation("t_RotationLucks");
                });

            modelBuilder.Entity("Library.DataTable.TableStaff.T_Staff", b =>
                {
                    b.Navigation("t_BillCakeCustoms");

                    b.Navigation("t_Chefs");

                    b.Navigation("t_OrderDetails");

                    b.Navigation("t_UserRoles");
                });

            modelBuilder.Entity("Library.DataTable.TableStaff.T_StaffOrChef", b =>
                {
                    b.Navigation("t_Staffs");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_City", b =>
                {
                    b.Navigation("t_AddressUserDefauls");

                    b.Navigation("t_Branches");

                    b.Navigation("t_Customers");

                    b.Navigation("t_Districts");

                    b.Navigation("t_InfomationOrders");

                    b.Navigation("t_Staffs");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Country", b =>
                {
                    b.Navigation("t_Customers");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Customer", b =>
                {
                    b.Navigation("t_AddressUserDefauls");

                    b.Navigation("t_CakeCustomIdeas");

                    b.Navigation("t_CartUsers");

                    b.Navigation("t_Comments");

                    b.Navigation("t_CustomCakes");

                    b.Navigation("t_HistoryGetGiftUserRotaionLucks");

                    b.Navigation("t_HistorySeachUsers");

                    b.Navigation("t_HistoryTurnRotaionLucks");

                    b.Navigation("t_HistoryUseVochers");

                    b.Navigation("t_HistoryUserGetVochers");

                    b.Navigation("t_NotificationCustomCakes");

                    b.Navigation("t_Orders");

                    b.Navigation("t_RatingWebsites");

                    b.Navigation("t_Ratings");

                    b.Navigation("t_TakeTurnsRotaionLucks");

                    b.Navigation("t_ViewerCakeUsers");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_CustomerOrStaff", b =>
                {
                    b.Navigation("t_Customers");

                    b.Navigation("t_Staffs");

                    b.Navigation("t_Users");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_District", b =>
                {
                    b.Navigation("t_AddressUserDefauls");

                    b.Navigation("t_Branches");

                    b.Navigation("t_Customers");

                    b.Navigation("t_InfomationOrders");

                    b.Navigation("t_Staffs");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Gender", b =>
                {
                    b.Navigation("t_Customers");

                    b.Navigation("t_Staffs");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Marriage", b =>
                {
                    b.Navigation("t_Staffs");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_User", b =>
                {
                    b.Navigation("t_Customers");

                    b.Navigation("t_Staffs");
                });

            modelBuilder.Entity("Library.DataTable.TableVocher.T_Vocher", b =>
                {
                    b.Navigation("t_HistoryUseVochers");

                    b.Navigation("t_HistoryUserGetVocher");
                });
#pragma warning restore 612, 618
        }
    }
}
